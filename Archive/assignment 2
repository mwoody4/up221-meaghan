{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "78cf212e-1a2c-4259-9acd-8edc5ccadfea",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "# Week 2 Spatial Data Exploration \n",
    "## Meaghan Woody\n",
    "## UP 221 W24\n",
    "\n",
    "### The dataset used here explored low access to grocery stores in LA by GEOID. We looked at the variables, how the values were reported, and evaluated the observations by year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2af10546-2181-42b1-aaac-39212d694d63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import geopandas as gpd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8b7bbaf7-936d-4c2c-944f-cccfc3a25539",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geoid</th>\n",
       "      <th>geoid20</th>\n",
       "      <th>year</th>\n",
       "      <th>denom_total_pop</th>\n",
       "      <th>lowaccess_count</th>\n",
       "      <th>lowaccess_li_count</th>\n",
       "      <th>lowaccess_kids_count</th>\n",
       "      <th>lowaccess_seniors_count</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1400000US06037101110</td>\n",
       "      <td>6037101110</td>\n",
       "      <td>2019</td>\n",
       "      <td>4731</td>\n",
       "      <td>115</td>\n",
       "      <td>37</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1400000US06037101122</td>\n",
       "      <td>6037101122</td>\n",
       "      <td>2019</td>\n",
       "      <td>3664</td>\n",
       "      <td>1704</td>\n",
       "      <td>137</td>\n",
       "      <td>292</td>\n",
       "      <td>260</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1400000US06037101220</td>\n",
       "      <td>6037101220</td>\n",
       "      <td>2019</td>\n",
       "      <td>3363</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1400000US06037101221</td>\n",
       "      <td>6037101221</td>\n",
       "      <td>2019</td>\n",
       "      <td>3260</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1400000US06037101222</td>\n",
       "      <td>6037101222</td>\n",
       "      <td>2019</td>\n",
       "      <td>2730</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4983</th>\n",
       "      <td>1400000US06037980035</td>\n",
       "      <td>6037980035</td>\n",
       "      <td>2015</td>\n",
       "      <td>6728</td>\n",
       "      <td>377</td>\n",
       "      <td>150</td>\n",
       "      <td>110</td>\n",
       "      <td>26</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4984</th>\n",
       "      <td>1400000US06037980036</td>\n",
       "      <td>6037980036</td>\n",
       "      <td>2015</td>\n",
       "      <td>7785</td>\n",
       "      <td>1835</td>\n",
       "      <td>647</td>\n",
       "      <td>406</td>\n",
       "      <td>243</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4985</th>\n",
       "      <td>1400000US06037980037</td>\n",
       "      <td>6037980037</td>\n",
       "      <td>2015</td>\n",
       "      <td>2786</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4986</th>\n",
       "      <td>1400000US06037980038</td>\n",
       "      <td>6037980038</td>\n",
       "      <td>2015</td>\n",
       "      <td>5199</td>\n",
       "      <td>55</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4987</th>\n",
       "      <td>1400000US06037980039</td>\n",
       "      <td>6037980039</td>\n",
       "      <td>2015</td>\n",
       "      <td>157</td>\n",
       "      <td>62</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4988 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     geoid     geoid20  year denom_total_pop lowaccess_count  \\\n",
       "0     1400000US06037101110  6037101110  2019            4731             115   \n",
       "1     1400000US06037101122  6037101122  2019            3664            1704   \n",
       "2     1400000US06037101220  6037101220  2019            3363               0   \n",
       "3     1400000US06037101221  6037101221  2019            3260               0   \n",
       "4     1400000US06037101222  6037101222  2019            2730               0   \n",
       "...                    ...         ...   ...             ...             ...   \n",
       "4983  1400000US06037980035  6037980035  2015            6728             377   \n",
       "4984  1400000US06037980036  6037980036  2015            7785            1835   \n",
       "4985  1400000US06037980037  6037980037  2015            2786               0   \n",
       "4986  1400000US06037980038  6037980038  2015            5199              55   \n",
       "4987  1400000US06037980039  6037980039  2015             157              62   \n",
       "\n",
       "     lowaccess_li_count lowaccess_kids_count lowaccess_seniors_count geometry  \n",
       "0                    37                   18                      12     None  \n",
       "1                   137                  292                     260     None  \n",
       "2                     0                    0                       0     None  \n",
       "3                     0                    0                       0     None  \n",
       "4                     0                    0                       0     None  \n",
       "...                 ...                  ...                     ...      ...  \n",
       "4983                150                  110                      26     None  \n",
       "4984                647                  406                     243     None  \n",
       "4985                  0                    0                       0     None  \n",
       "4986                  3                   10                      15     None  \n",
       "4987                  8                    7                       7     None  \n",
       "\n",
       "[4988 rows x 9 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing dataset\n",
    "grocery=gpd.read_file ('data/All Years Grocery Store Access Calculations.csv')\n",
    "grocery"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c5639ae-d9db-45a2-a325-912d4060b74f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# To explore the data, we will use a set of commands and run a query.\n",
    "# .shape\n",
    "# .info\n",
    "# .head()\n",
    "# .value_counts()\n",
    "# .plot()\n",
    "# run a query to filter data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "a36fcc82-3288-4748-9024-045cd72c57dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4988, 9)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grocery.shape\n",
    "\n",
    "# .shape shows us there are 4988 rows and 9 columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "98679a5e-0363-4bca-8a1a-8b24d09eec2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of                      geoid     geoid20  year denom_total_pop lowaccess_count  \\\n",
       "0     1400000US06037101110  6037101110  2019            4731             115   \n",
       "1     1400000US06037101122  6037101122  2019            3664            1704   \n",
       "2     1400000US06037101220  6037101220  2019            3363               0   \n",
       "3     1400000US06037101221  6037101221  2019            3260               0   \n",
       "4     1400000US06037101222  6037101222  2019            2730               0   \n",
       "...                    ...         ...   ...             ...             ...   \n",
       "4983  1400000US06037980035  6037980035  2015            6728             377   \n",
       "4984  1400000US06037980036  6037980036  2015            7785            1835   \n",
       "4985  1400000US06037980037  6037980037  2015            2786               0   \n",
       "4986  1400000US06037980038  6037980038  2015            5199              55   \n",
       "4987  1400000US06037980039  6037980039  2015             157              62   \n",
       "\n",
       "     lowaccess_li_count lowaccess_kids_count lowaccess_seniors_count geometry  \n",
       "0                    37                   18                      12     None  \n",
       "1                   137                  292                     260     None  \n",
       "2                     0                    0                       0     None  \n",
       "3                     0                    0                       0     None  \n",
       "4                     0                    0                       0     None  \n",
       "...                 ...                  ...                     ...      ...  \n",
       "4983                150                  110                      26     None  \n",
       "4984                647                  406                     243     None  \n",
       "4985                  0                    0                       0     None  \n",
       "4986                  3                   10                      15     None  \n",
       "4987                  8                    7                       7     None  \n",
       "\n",
       "[4988 rows x 9 columns]>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grocery.info\n",
    "\n",
    "# this is allowing us to look at the first 5 and last 5 observations for the 9 variables to see what the values look like"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d371ffe6-ef38-4f69-98a9-406dec72855a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geoid</th>\n",
       "      <th>geoid20</th>\n",
       "      <th>year</th>\n",
       "      <th>denom_total_pop</th>\n",
       "      <th>lowaccess_count</th>\n",
       "      <th>lowaccess_li_count</th>\n",
       "      <th>lowaccess_kids_count</th>\n",
       "      <th>lowaccess_seniors_count</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1400000US06037101110</td>\n",
       "      <td>6037101110</td>\n",
       "      <td>2019</td>\n",
       "      <td>4731</td>\n",
       "      <td>115</td>\n",
       "      <td>37</td>\n",
       "      <td>18</td>\n",
       "      <td>12</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1400000US06037101122</td>\n",
       "      <td>6037101122</td>\n",
       "      <td>2019</td>\n",
       "      <td>3664</td>\n",
       "      <td>1704</td>\n",
       "      <td>137</td>\n",
       "      <td>292</td>\n",
       "      <td>260</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1400000US06037101220</td>\n",
       "      <td>6037101220</td>\n",
       "      <td>2019</td>\n",
       "      <td>3363</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1400000US06037101221</td>\n",
       "      <td>6037101221</td>\n",
       "      <td>2019</td>\n",
       "      <td>3260</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1400000US06037101222</td>\n",
       "      <td>6037101222</td>\n",
       "      <td>2019</td>\n",
       "      <td>2730</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  geoid     geoid20  year denom_total_pop lowaccess_count  \\\n",
       "0  1400000US06037101110  6037101110  2019            4731             115   \n",
       "1  1400000US06037101122  6037101122  2019            3664            1704   \n",
       "2  1400000US06037101220  6037101220  2019            3363               0   \n",
       "3  1400000US06037101221  6037101221  2019            3260               0   \n",
       "4  1400000US06037101222  6037101222  2019            2730               0   \n",
       "\n",
       "  lowaccess_li_count lowaccess_kids_count lowaccess_seniors_count geometry  \n",
       "0                 37                   18                      12     None  \n",
       "1                137                  292                     260     None  \n",
       "2                  0                    0                       0     None  \n",
       "3                  0                    0                       0     None  \n",
       "4                  0                    0                       0     None  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grocery.head(5)\n",
    "\n",
    "# .head allows us to look at a few observations at a time, here we print the first 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "36ad9935-a429-4f7e-a8e9-04511e995914",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['year', 'count']"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I want to create a graph the data separated by year\n",
    "# We need to prep the variables for plotting\n",
    "\n",
    "# get values for a single column\n",
    "grocery['year'].sample(5)\n",
    "\n",
    "# save it as a variable\n",
    "year = grocery['year'].value_counts()\n",
    "\n",
    "# convert the series into a dataframe\n",
    "year = year.reset_index()\n",
    "\n",
    "# current columns as a list\n",
    "year.columns.to_list()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "d94f06cf-d8c6-4618-82d7-6379239580f4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Number of obersavations per year'}, xlabel='year'>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We can see the graph for the amount of observations that are recorded by each year.\n",
    "# This is not very informative for our variables but it shows us that the same number of GEOIDs were sampled in 2019 and 2015\n",
    "\n",
    "year.plot.bar(x = 'year', y = 'count', title = 'Number of observations per year')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "38425440-8fbe-4464-91fd-13d93256f2ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'geopandas.geodataframe.GeoDataFrame'>\n",
      "RangeIndex: 4988 entries, 0 to 4987\n",
      "Data columns (total 9 columns):\n",
      " #   Column                   Non-Null Count  Dtype   \n",
      "---  ------                   --------------  -----   \n",
      " 0   geoid                    4988 non-null   object  \n",
      " 1   geoid20                  4988 non-null   object  \n",
      " 2   year                     4988 non-null   object  \n",
      " 3   denom_total_pop          4988 non-null   object  \n",
      " 4   lowaccess_count          4988 non-null   object  \n",
      " 5   lowaccess_li_count       4988 non-null   object  \n",
      " 6   lowaccess_kids_count     4988 non-null   object  \n",
      " 7   lowaccess_seniors_count  4988 non-null   object  \n",
      " 8   geometry                 0 non-null      geometry\n",
      "dtypes: geometry(1), object(8)\n",
      "memory usage: 350.8+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>lowaccess_count</th>\n",
       "      <th>lowaccess_li_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019</td>\n",
       "      <td>115</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019</td>\n",
       "      <td>1704</td>\n",
       "      <td>137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4983</th>\n",
       "      <td>2015</td>\n",
       "      <td>377</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4984</th>\n",
       "      <td>2015</td>\n",
       "      <td>1835</td>\n",
       "      <td>647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4985</th>\n",
       "      <td>2015</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4986</th>\n",
       "      <td>2015</td>\n",
       "      <td>55</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4987</th>\n",
       "      <td>2015</td>\n",
       "      <td>62</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4988 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      year lowaccess_count lowaccess_li_count\n",
       "0     2019             115                 37\n",
       "1     2019            1704                137\n",
       "2     2019               0                  0\n",
       "3     2019               0                  0\n",
       "4     2019               0                  0\n",
       "...    ...             ...                ...\n",
       "4983  2015             377                150\n",
       "4984  2015            1835                647\n",
       "4985  2015               0                  0\n",
       "4986  2015              55                  3\n",
       "4987  2015              62                  8\n",
       "\n",
       "[4988 rows x 3 columns]"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lastly we will run a query to filter through our data\n",
    "# filter the dataset to only show low access, low income & low access, and year\n",
    "# our geometry is labeled as \"None\" for each obs so we cannot explore mapping given the commands learned this week\n",
    "\n",
    "# dataframe original variable names and types\n",
    "grocery.info()\n",
    "\n",
    "# dataframe with a subset of columns\n",
    "desired_columns = ['year','lowaccess_count','lowaccess_li_count']\n",
    "grocery[desired_columns].sample(5)\n",
    "\n",
    "grocery_trimmed = grocery[desired_columns].copy()\n",
    "grocery_trimmed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "52df24dd-027b-4786-adf7-5cfd8a68c3cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       None\n",
       "1       None\n",
       "2       None\n",
       "3       None\n",
       "4       None\n",
       "        ... \n",
       "4983    None\n",
       "4984    None\n",
       "4985    None\n",
       "4986    None\n",
       "4987    None\n",
       "Name: geometry, Length: 4988, dtype: geometry"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
